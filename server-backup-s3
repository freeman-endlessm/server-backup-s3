#!/bin/bash -e

#    Copyright 2016 Philip J Freeman <elektron@halo.nu>

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


					# Config Variables:
					###################

					# NOTE: override the defaults here
					# by adding definitions to a config
					# file.

#AWS_ACCESS_KEY_ID			# AWS Credentials, not set to allow
#AWS_SECRET_ACCESS_KEY			#   inheritance from environment

BACKUP_LOCATION=s3://bkt.example.org	# s3 bucket to write backups to
					#   (e.g. s3://bucket_name[/directory])

ENCRYPT_TO=2697143F			# space separated list of key ids to
					#   encrypt backups to

FILESYSTEMS=""				# mountpoints to backup, if blank
					#   we use /etc/fstab to guess.

LEVEL_LIMIT=3				# How many incrementals to take before
					#   doing another full backup

					# Less Common Variables:
					########################

HOST=$(hostname -f)			# hostname used for naming of backups

BAK_DIR="/var/cache/backup"		# Local cache directory


DATE=$(date +%Y%m%d-%H%M%S.%N-%Z)

if [ -z "${1}" ]; then
  echo "Usage: ${0} <CONFIG>"
  exit 2
fi

source ${1}

export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

if [ -z "${FILESYSTEMS}" ]; then
	FILESYSTEMS=$(cat /etc/fstab | grep -v ^# | awk '{ if (match($2,/^\//)){print $2;}}')
fi

if [ ! -d ${BAK_DIR} ]; then
	mkdir ${BAK_DIR}
fi

S3CMD_VERSION=1.5.2
if [ ! -x ${BAK_DIR}/s3cmd-${S3CMD_VERSION}/s3cmd ]; then
  wget -qO ${BAK_DIR}/s3cmd-v${S3CMD_VERSION}.zip "https://github.com/s3tools/s3cmd/archive/v${S3CMD_VERSION}.zip"
  (cd ${BAK_DIR}; unzip -q s3cmd-v${S3CMD_VERSION}.zip)
fi

for DIR in /var/cache ${BAK_DIR}; do
	if [ ! -e ${DIR}/CACHEDIR.TAG ]; then
		echo "Signature: 8a477f597d28d172789f06886806bc55" > ${DIR}/CACHEDIR.TAG
	fi
done

if [ ! -f ${BAK_DIR}/curlevel ]; then
	echo 0 > ${BAK_DIR}/curlevel
fi

CURLEVEL=`cat ${BAK_DIR}/curlevel`

#TODO: Check that level is numeric, set to 0 if not.

#GPG Setup
GPG_RECIPIENTS=""
for recipient in ${ENCRYPT_TO}; do
	if ! gpg --list-keys ${recipient} > /dev/null 2>&1; then
		echo "Attempting to download GPG Key: ${recipient}"
		gpg --recv-key ${recipient}
	fi
	GPG_RECIPIENTS="${GPG_RECIPIENTS} -r ${recipient}"
done


mkdir ${BAK_DIR}/${DATE}.${CURLEVEL}

pushd ${BAK_DIR}/${DATE}.${CURLEVEL} > /dev/null

if [ ${CURLEVEL} -eq 0 ]; then

	if [ -e ${BAK_DIR}/.incremental ]; then
		rm -rf ${BAK_DIR}/.incremental
	fi

	mkdir ${BAK_DIR}/.incremental
fi

for FS in ${FILESYSTEMS}; do

	FS_CLEAN=${FS//\//_}

	if [ ${CURLEVEL} -gt 0 ]; then
		gunzip -c ${BAK_DIR}/.incremental/${FS_CLEAN}.g.gz > \
			${BAK_DIR}/.incremental/${FS_CLEAN}.g
	fi

	tar -C ${FS} --exclude-caches-under --listed-incremental=${BAK_DIR}/.incremental/${FS_CLEAN}.g --one-file-system -clpf - . | gpg --quiet --trust-model always -e ${GPG_RECIPIENTS} | ${BAK_DIR}/s3cmd-${S3CMD_VERSION}/s3cmd --quiet put - ${BACKUP_BUCKET}/${HOST}/${DATE}.${CURLEVEL}/${FS_CLEAN}.tar.gpg

	gzip -c ${BAK_DIR}/.incremental/${FS_CLEAN}.g > \
		${BAK_DIR}/.incremental/${FS_CLEAN}.g.gz
	rm ${BAK_DIR}/.incremental/${FS_CLEAN}.g
done

touch SUCCESS

popd > /dev/null

if [ ${CURLEVEL} -ge ${LEVEL_LIMIT} ]; then
	echo 0 > ${BAK_DIR}/curlevel
else
	echo $(( ${CURLEVEL} + 1 )) > ${BAK_DIR}/curlevel
fi
